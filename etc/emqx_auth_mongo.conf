##--------------------------------------------------------------------
## MongoDB Auth/ACL Plugin
##--------------------------------------------------------------------

mongodb {
    server = "127.0.0.1:27017"
    database = "mqtt"
    login = ""
    password = ""
    pool_size = 8
    auth_source = admin ## MongoDB AuthSource
    type = single ## Topology Type: single | unknown | sharded | rs
    rs_set_name = "" ## The set name if type is rs.
    query_timeout = 5s
    sslmode = off ## Whether to enable SSL connection: on | off
    ssl_opts = {
        keyfile = "certs/keyfile"
        certfile = ""
        cacertfile = ""
    }
}

## MongoDB write mode.
##
## Value: unsafe | safe
## w_mode =

## Mongo read mode.
##
## Value: master | slave_ok
## r_mode =

## MongoDB topology options.
topology {
    pool_size = 1
    max_overflow = 0
    overflow_ttl = 1000
    overflow_check_period = 1000
    local_threshold_ms = 1000
    connect_timeout_ms = 20000
    socket_timeout_ms = 100
    server_selection_timeout_ms = 30000
    wait_queue_timeout_ms = 1000
    heartbeat_frequency_ms = 10000
    min_heartbeat_frequency_ms = 1000
}

## Authentication query.
auth_query {
    collection = "mqtt_user"
    password_field = "password"
    ## Password hash: plain | md5 | sha | sha256 | bcrypt
    password_hash = "sha256"
    ## sha256 with salt suffix
    ## password_hash = "sha256,salt"

    ## sha256 with salt prefix
    ## password_hash = "salt,sha256"

    ## bcrypt with salt prefix
    ## password_hash = "salt,bcrypt"

    ## pbkdf2 with macfun iterations dklen
    ## macfun: md4, md5, ripemd160, sha, sha224, sha256, sha384, sha512
    ## password_hash = "pbkdf2,sha256,1000,20"

    ## Authentication Selector: {Field}={Placeholder}.
    ##
    ## Variables:
    ##  - %u: username
    ##  - %c: clientid
    ##  - %C: common name of client TLS cert
    ##  - %d: subject of client TLS cert
    selector = "username=%u"
}

## Enable superuser query.
super_query {
    collection = "mqtt_user"
    super_field = "is_superuser"
    selector = "username=%u, clientid=%c"
    selector = "username=%u"
}

## Enable ACL query.
acl_query {
    collection = "mqtt_acl"
    selector = "username=%u"
}

## ACL Selector.
##
## Multiple selectors could be combined with '$or'
##   when query acl from mongo.
##
## e.g.
##
## With following 2 selectors configured:
##
## auth.mongo.acl_query.selector.1 = username=%u
## auth.mongo.acl_query.selector.2 = username=$all
##
## And if a client connected using username 'ilyas',
##   then the following mongo command will be used to
##   retrieve acl entries:
##
## db.mqtt_acl.find({$or: [{username: "ilyas"},  {username: "$all"}]});
##
## Variables:
##  - %u: username
##  - %c: clientid
##
## Examples:
##
## auth.mongo.acl_query.selector.1 = username=%u,clientid=%c
## auth.mongo.acl_query.selector.2 = username=$all
## auth.mongo.acl_query.selector.3 = clientid=$all

